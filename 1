let mat = [
        [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 0, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
        [0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 0, 1, 1],
        [1, 1, 0, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1, 0, 0]
]	

// 0,0 -> 5,7 == 22 

function longestPath(matrix, source, destination) {
	let path = 0
	for (let i=0; i<mat.length; i++) {
		for (let j=0; j<mat[0].length; j++) {
			if (matrix[i][j] !== 0) {
				path++
				if (destination[0] === i, destination[1] === j) {
					console.log([i,j], "<== reached the destination")
					return path
				}
			} else {
				break;
			}
		}
	}
}

console.log(longestPath(mat, [0,0], [5,7]))
